"""
valid_actions.py

Description:
    This script analyzes a dataset of Pok√©mon Showdown battles to check for conflicts between the
    action validity mask (generated by is_valid_order logic in EliteFurretAI) and the actual actions
    submitted by the player in the dataset.

    For each battle and each sample, it verifies whether the target action taken by the player is
    considered valid according to the action mask. If the action is masked out (i.e., considered invalid),
    or is out of bounds, it prints a warning with details about the sample.

    This is useful for debugging the action masking logic and ensuring that the dataset does not contain
    actions that would be considered illegal by the model or environment.

    Progress and estimated time remaining are printed during the scan.

    Usage:
        python valid_actions.py <path_to_battle_dataset.json>
"""

import sys
import time

import orjson
import torch

from elitefurretai.model_utils import BattleDataset, Embedder


def main(battle_filepath: str):
    files = []
    with open(battle_filepath, "rb") as f:
        files = orjson.loads(f.read())

    embedder = Embedder(
        format="gen9vgc2023regulationc", feature_set=Embedder.FULL, omniscient=True
    )

    # Create datasets
    dataset = BattleDataset(files=files, embedder=embedder)
    dataloader = torch.utils.data.DataLoader(
        dataset, batch_size=1, shuffle=False, num_workers=4
    )

    print(f"Starting! Dataset size: {len(dataset)} battles ({len(dataloader)} batches)")
    num_batches, steps, start = 0, 0, time.time()
    for batch_idx, batch in enumerate(dataloader):
        _, actions, action_masks, _, masks = batch
        actions = actions.flatten(0, 1)
        action_masks = action_masks.flatten(0, 1)
        masks = masks.flatten(0, 1)

        valid_mask = masks.bool()
        if valid_mask.sum() == 0:
            continue

        # For each valid sample, check if the target action is masked out
        for i in range(actions.shape[0]):
            if valid_mask[i].item() == 0:
                continue

            action_idx = int(actions[i].item())
            prefix = f"\n[File {files[batch_idx // 2]}, Batch {batch_idx}, Sample {i}] Target action {action_idx}"
            if action_idx < 0 or action_idx >= action_masks.shape[1]:
                print(f"{prefix} is out of bounds for action_masks.")
                continue
            if action_masks[i, action_idx] == 0:
                print(f"{prefix} is masked out by action_masks.")

        steps += valid_mask.sum().item()
        num_batches += 1

        # Print progress
        hours = int(time.time() - start) // 3600
        minutes = int(time.time() - start) // 60
        seconds = int(time.time() - start) % 60

        time_per_batch = (time.time() - start) * 1.0 / (num_batches + 1)
        est_time_left = (len(dataloader) - num_batches) * time_per_batch
        hours_left = int(est_time_left // 3600)
        minutes_left = int((est_time_left % 3600) // 60)
        seconds_left = int(est_time_left % 60)

        if dataloader.batch_size is None:
            print(
                f"\033[2K\rProcessed {num_batches} in {hours}h {minutes}m {seconds}s",
                end="",
            )
        else:
            processed = f"Processed {num_batches * dataloader.batch_size} battles ({round(num_batches * 100.0 / len(dataloader), 2)}%) in {hours}h {minutes}m {seconds}s"
            left = f" with an estimated {hours_left}h {minutes_left}m {seconds_left}s left in this epoch"
            print("\033[2K\r" + processed + left, end="")


if __name__ == "__main__":
    main(sys.argv[1])
